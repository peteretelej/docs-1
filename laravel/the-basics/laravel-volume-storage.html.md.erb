---
title: "Persisting the Storage Folder"
layout: framework_docs
objective: Mount a volume to a re-initialized storage folder 
order: 7
---

The [storage folder](https://laravel.com/docs/9.x/filesystem#the-local-driver) by default, holds several "generated" essentials of your Laravel application. 

It's the default burrow for session, cache, and file data amongst others. If you'd opt to persist data on this folder, you'll have to mount a [volume](/docs/reference/volumes/) to it.


## The Steps

1.  Make sure you are in your Laravel Fly App's directory

    ```cmd
    cd <laravel-fly-configured-app>
    ```
2.  [Create a volume](/docs/flyctl/volumes-create/), you'll be attaching this later to your Laravel Fly App's storage directory 

    ```cmd
    fly volumes create storage\_vol --region ams --size 20 
    ```

3.  Revise your Laravel Fly App's `fly.toml` file to mount the volume created for your storage directory:
  ```
    [mounts]
      source="storage_vol"
      destination="/var/www/html/storage"
  ```

    <aside class="callout">
    Caution! Mounting a Volume to a folder will initially erase any item it contains during the first time the Volume is mounted for the folder. 
    <br/><br/>
    
    For example, Laravel's storage folder contains subfolders: app, framework, and logs. 
    Mounting the volume to the storage folder erases these directories, and leaves behind a sole item paradoxically named as "lost+found". 
    
    But, you wouldn't want to only be left with "lost+found" in your storage folder. You'd want to still have the necessary files and directories in there for successful session, views, caching, and file storage compliance with Laravel's default configuration.
    </aside>
  

4.  To fix the little storage-content-erasure issue as stated in the callout above, please go ahead and make a copy of your storage folder in a "backup" folder. You can name this directory "storage_".

    ```cmd
    cp -r storage storage_
    ```
    You'll later use this folder to copy over its contents to the volumized storage folder.
    <br />
    <br />

5.  Next create a [Startup Script](/docs/laravel/the-basics/customizing-deployments/) that will initialize the volumized storage folder's contents.
    ```cmd
    touch .fly/scripts/1\_storage\_init.sh
    ```

    <small>
    Side Note: Start up scripts are run in numeric-alphabetical order. Naming `1\_storage\_init.sh` makes sure it is the first script run. Otherwise, naming the file as `storage_init.sh` alone would've moved the `caches.sh` script above it, and would've executed before storage initialization happened. One of the commands in the `caches.sh` will not have worked properly, due to a lack of properly initialized storage directory.
    </small>

    <b>On to the content of the Start Up script:</b>

    ```bash
    FOLDER=/var/www/html/storage/app
    if [ ! -d "$FOLDER" ]; then
        echo "$FOLDER is not a directory, copying storage_ content to storage"
        cp -r /var/www/html/storage_/. /var/www/html/storage
        echo "deleting storage_..."
        rm -rf /var/www/html/storage_
    fi
    ```

    <small>
    So what happened above?
    - The condition statement checks if the app folder does not exist in the volumized storage folder. If it does not exist, it copies over the contents of the storage_ folder to the volumized storage folder.
    </small>
    <br />
    <br />

6. <b>Finally, deploy your Laravel Fly App!</b>

    ```cmd
    fly deploy
    ```

#### **_Possible Errors_**

```output
Error not enough volumes named `<volume_name>` (1) to run `(<n>)` processes
```

The above error can come up after configuring your volume in `fly.toml` and executing `fly deploy`. 

It can mean that there are `<n>` processes configured in your `fly.toml` trying to use the volume!
Take note however, that a Volume can only be used by one at any given time. 

One way to fix this issue is to separate each process into [different Fly.io apps](/docs/app-guides/multiple-processes/#maybe-you-want-multiple-apps-though). Of course, separate application per process might require inter-communication between the applications. 

Fly.io applications can easily communicate with each other over a [private network](/docs/reference/private-networking/). Not only that, but Fly.io also offers the `fly-replay` [response header](/docs/reference/dynamic-request-routing/#the-fly-replay-response-header) which can be used to "redirect" request from one application to another, and return response from the correct application.
 